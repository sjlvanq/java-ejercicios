[Java]
fori=for(int i = 0; i < %cursor%; i++) %block_cursor%
#else-if=else if(%cursor%) %block_cursor%
itar=for(int i = 0; i < %cursor%.length; i++) {\n\t%cursor% %cursor% = %cursor%[i];\n}
itco=for(%cursor% %cursor% = %cursor%.iterator(); %cursor%.hasNext(); ) {\n\t%cursor% %cursor% =(%cursor%) %cursor%.next();\n}
iten=while(%cursor%.hasMoreElements()){\n\t%cursor% %cursor% = (%cursor%) %cursor%.nextElement();\n}
itit=while(%cursor%.hasNext()){\n\t\n\t%cursor%%cursor% = (%cursor%) %cursor%.next();\n}
#itli=for (int i = 0; i < $LIST$.size(); i++) {\n\t$ELEMENT_TYPE$ $VAR$ = $CAST$ $LIST$.get(i);\n}
#itm=for (java.util.Map.Entry<$KEY_TYPE$, $VALUE_TYPE$> $ENTRY$: $MAP$.entrySet()) {\n\t$KEY_TYPE$ $KEY$ = $ENTRY$.getKey();\n\t$VALUE_TYPE$ $VALUE$ = $ENTRY$.getValue();\n}
#ittok=for (java.util.StringTokenizer $TOKENIZER$ = new java.util.StringTokenizer($STRING$); $TOKENIZER$.hasMoreTokens(); ) {\n\tString $VAR$ = $TOKENIZER_COPY$.nextToken();\n}
ritar=for(int i = %cursor%.length - 1; i >= 0; i--) {\n\t%cursor% %cursor% = %cursor%[i];\n}
#iter=for ($ELEMENT_TYPE$ $VAR$ : $ITERABLE_TYPE$) {}
#inst=if ($EXPR$ instanceof $TYPE$) {\n\t$TYPE$ $VAR$ = ($TYPE$)$EXPR$;\n}
lst=%cursor%[%cursor%.length - 1]
mn=%cursor% = Math.min(%cursor%, %cursor%);
mx=%cursor% = Math.max(%cursor%, %cursor%);
psvm=public static void main(String[] args){\n%cursor%\n}
main=public static void main(String[] args){\n%cursor%\n}
#toar=$COLLECTION$.toArray(new $COMPONENT_TYPE$[0])
lazy=if (%cursor% == null) {\n\t%cursor% = new $TYPE$(%cursor%);\n}
inn=if (%cursor% != null) {%block_cursor%}
ifn=if (%cursor% == null) {%block_cursor%}
geti=public static %cursor% getInstance() {\n\treturn %cursor%\n}
St=String 
psf=public static final 
prsf=private static final 
psfi=public static final int 
psfs=public static final String 
thr=throw new 
serr=System.err.println(%cursor%);
serrc=System.err::println
sout=System.out.println(%cursor%);
soutc=System.out::println
souf=System.out.printf("%cursor%");
#soutm=System.out.println("$CLASS_NAME$.$METHOD_NAME$");
#soutp=System.out.println($FORMAT$);
soutv=System.out.println("%cursor% = " + %cursor%);
C=java.util.concurrent.Callable<$RET$> callable = new java.util.concurrent.Callable<$RET$>() {\n\tpublic $RET$ call() throws Exception {\n\t\t$SELECTION$\n\t\n \t}\n};
RL=$LOCK$.readLock().lock();\ntry {\n\t$SELECTION$\n} finally {\n\t$LOCK$.readLock().unlock();\n}
WL=$LOCK$.writeLock().lock();\ntry {\n\t$SELECTION$\n} finally {\n\t$LOCK$.writeLock().unlock();\n}
I=for ($ELEMENT_TYPE$ $VAR$ : $SELECTION$) {\n\t$END$\n}
stss=try (final var scope = new java.util.concurrent.StructuredTaskScope.ShutdownOnSuccess()) {\n\t%cursor%\n\tscope.join();\n}catch (InterruptedException e) {\n\t// TODO: handle exception\n}
stsf=try (final var scope = new java.util.concurrent.StructuredTaskScope.ShutdownOnFailure()) {\n\t%cursor%\n\tscope.join();\n} catch (InterruptedException e) {\n\t// TODO: handle exception\n}
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for (int i = 0; i < %cursor%; i++)%brace_open%\n%brace_close%
while=while (%cursor%)%block_cursor%
do=do\n{\n\t%cursor%\n} while (%cursor%)\n
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
try=try%block%\ncatch (%cursor%)%block_cursor%
